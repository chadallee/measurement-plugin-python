# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import driver_pb2 as driver__pb2


class InstrumentInteractionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/external_driver_wrapper.InstrumentInteraction/Initialize',
                request_serializer=driver__pb2.InitializeRequest.SerializeToString,
                response_deserializer=driver__pb2.InitializeResponse.FromString,
                )
        self.ConfigureMeasurementDigits = channel.unary_unary(
                '/external_driver_wrapper.InstrumentInteraction/ConfigureMeasurementDigits',
                request_serializer=driver__pb2.ConfigureMeasurementDigitsRequest.SerializeToString,
                response_deserializer=driver__pb2.ConfigureMeasurementDigitsResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/external_driver_wrapper.InstrumentInteraction/Read',
                request_serializer=driver__pb2.ReadRequest.SerializeToString,
                response_deserializer=driver__pb2.ReadResponse.FromString,
                )
        self.Close = channel.unary_unary(
                '/external_driver_wrapper.InstrumentInteraction/Close',
                request_serializer=driver__pb2.CloseRequest.SerializeToString,
                response_deserializer=driver__pb2.CloseResponse.FromString,
                )


class InstrumentInteractionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureMeasurementDigits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InstrumentInteractionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=driver__pb2.InitializeRequest.FromString,
                    response_serializer=driver__pb2.InitializeResponse.SerializeToString,
            ),
            'ConfigureMeasurementDigits': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureMeasurementDigits,
                    request_deserializer=driver__pb2.ConfigureMeasurementDigitsRequest.FromString,
                    response_serializer=driver__pb2.ConfigureMeasurementDigitsResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=driver__pb2.ReadRequest.FromString,
                    response_serializer=driver__pb2.ReadResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=driver__pb2.CloseRequest.FromString,
                    response_serializer=driver__pb2.CloseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'external_driver_wrapper.InstrumentInteraction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InstrumentInteraction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/external_driver_wrapper.InstrumentInteraction/Initialize',
            driver__pb2.InitializeRequest.SerializeToString,
            driver__pb2.InitializeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureMeasurementDigits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/external_driver_wrapper.InstrumentInteraction/ConfigureMeasurementDigits',
            driver__pb2.ConfigureMeasurementDigitsRequest.SerializeToString,
            driver__pb2.ConfigureMeasurementDigitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/external_driver_wrapper.InstrumentInteraction/Read',
            driver__pb2.ReadRequest.SerializeToString,
            driver__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/external_driver_wrapper.InstrumentInteraction/Close',
            driver__pb2.CloseRequest.SerializeToString,
            driver__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
