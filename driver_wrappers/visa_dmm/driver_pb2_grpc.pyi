"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import driver_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class InstrumentInteractionStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Initialize: grpc.UnaryUnaryMultiCallable[
        driver_pb2.InitializeRequest,
        driver_pb2.InitializeResponse,
    ]

    ConfigureMeasurementDigits: grpc.UnaryUnaryMultiCallable[
        driver_pb2.ConfigureMeasurementDigitsRequest,
        driver_pb2.ConfigureMeasurementDigitsResponse,
    ]

    Read: grpc.UnaryUnaryMultiCallable[
        driver_pb2.ReadRequest,
        driver_pb2.ReadResponse,
    ]

    Close: grpc.UnaryUnaryMultiCallable[
        driver_pb2.CloseRequest,
        driver_pb2.CloseResponse,
    ]

class InstrumentInteractionAsyncStub:
    Initialize: grpc.aio.UnaryUnaryMultiCallable[
        driver_pb2.InitializeRequest,
        driver_pb2.InitializeResponse,
    ]

    ConfigureMeasurementDigits: grpc.aio.UnaryUnaryMultiCallable[
        driver_pb2.ConfigureMeasurementDigitsRequest,
        driver_pb2.ConfigureMeasurementDigitsResponse,
    ]

    Read: grpc.aio.UnaryUnaryMultiCallable[
        driver_pb2.ReadRequest,
        driver_pb2.ReadResponse,
    ]

    Close: grpc.aio.UnaryUnaryMultiCallable[
        driver_pb2.CloseRequest,
        driver_pb2.CloseResponse,
    ]

class InstrumentInteractionServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Initialize(
        self,
        request: driver_pb2.InitializeRequest,
        context: _ServicerContext,
    ) -> typing.Union[driver_pb2.InitializeResponse, collections.abc.Awaitable[driver_pb2.InitializeResponse]]: ...

    @abc.abstractmethod
    def ConfigureMeasurementDigits(
        self,
        request: driver_pb2.ConfigureMeasurementDigitsRequest,
        context: _ServicerContext,
    ) -> typing.Union[driver_pb2.ConfigureMeasurementDigitsResponse, collections.abc.Awaitable[driver_pb2.ConfigureMeasurementDigitsResponse]]: ...

    @abc.abstractmethod
    def Read(
        self,
        request: driver_pb2.ReadRequest,
        context: _ServicerContext,
    ) -> typing.Union[driver_pb2.ReadResponse, collections.abc.Awaitable[driver_pb2.ReadResponse]]: ...

    @abc.abstractmethod
    def Close(
        self,
        request: driver_pb2.CloseRequest,
        context: _ServicerContext,
    ) -> typing.Union[driver_pb2.CloseResponse, collections.abc.Awaitable[driver_pb2.CloseResponse]]: ...

def add_InstrumentInteractionServicer_to_server(servicer: InstrumentInteractionServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
